const airlinesPro = () => {
  const flights = [
    { id: 00, to: "New York", from: "Barcelona", cost: 700, layover: false },
    { id: 01, to: "Los Angeles", from: "Madrid", cost: 1100, layover: true },
    { id: 02, to: "Paris", from: "Barcelona", cost: 210, layover: false },
    { id: 03, to: "Roma", from: "Barcelona", cost: 150, layover: false },
    { id: 04, to: "London", from: "Madrid", cost: 200, layover: false },
    { id: 05, to: "Madrid", from: "Barcelona", cost: 90, layover: false },
    { id: 06, to: "Tokyo", from: "Madrid", cost: 1500, layover: true },
    { id: 07, to: "Shangai", from: "Barcelona", cost: 800, layover: true },
    { id: 08, to: "Sydney", from: "Barcelona", cost: 150, layover: true },
    { id: 09, to: "Tel-Aviv", from: "Madrid", cost: 150, layover: false },
  ];

  let name;
  const goodbyeMessage = (access) => {
    if (access === null || access === undefined || !access) {
      console.log(
        "Thank you for visiting ISDI Coders Airlines, see you later!"
      );

      return;
    }
  };
  const invalidInput = () => {
    const messageInvalid = alert("Invalid value try again please.");
  };
  const doAnotherOperation = () => {
    let continueOrCancel = confirm(
      "Do you want to perform or cancel the operation? accept / cancel"
    );

    if (continueOrCancel) {
      administratorOrUser();
      return;
    } else {
      continueOrCancel === false;
      goodbyeMessage(continueOrCancel);
      return;
    }
  };
  const inputData = () => {
    name = prompt(`Welcome indicate your name please.`);
    if (name === null) {
      return;
    }

    const welcomeMessage =
      name === " "
        ? console.log(`Welcome to ISDI Coders Airlines!`)
        : console.log(`Welcome to ISDI Coders Airlines ${name}!`);
    return name;
  };
  inputData();

  const airlines = () => {
    console.log(`This is the information of all the flights:\n`);
    const flightSchedule = (flights) => {
      const flightsDescription = flights
        .map(
          (flight) =>
            `The flight ${flight.id} with origin ${flight.from} and destiny ${
              flight.to
            } has a cost of ${flight.cost}€ and ${
              flight.layover
                ? "makes a stopover."
                : "does not make any stopovers."
            }`
        )
        .join("\n");

      console.log(`${flightsDescription}`);
      return;
    };
    flightSchedule(flights);

    const averageCost = (flights) => {
      let totalCost = flights.reduce(
        (accumulator, flight) => accumulator + flight.cost,
        0
      );
      let averageCost = totalCost / flights.length;

      console.log(`The average cost of flights is: ${averageCost}€`);
      return;
    };
    averageCost(flights);

    console.log(`These are the flights with stopovers:\n`);
    const flightsWithStopovers = (flights) => {
      const groupeFlight = flights
        .filter((flight) => flight.layover === true)
        .sort((a, b) => a.cost - b.cost)
        .map(
          (flight) =>
            `The flight ${flight.id} with origin ${flight.from} and destiny ${flight.to} has a cost of ${flight.cost}€.`
        )
        .join("\n");
      console.log(`${groupeFlight}`);
      return;
    };
    flightsWithStopovers(flights);

    const lastFlights = (flights) => {
      const last5Destinations = flights
        .slice(-5)
        .map((flight) => flight.to)
        .join("\n");

      console.log(
        `These are the last 5 flights today, bound for:\n${last5Destinations}.`
      );

      return;
    };

    lastFlights(flights);
  };

  if (name === null) {
    console.log("Thank you for visiting ISDI Coders Airlines!, see you later!");
    return;
  } else {
    airlines();
  }

  const flightUpdate = () => {
    let flightModification = flights
      .map(
        (flight) =>
          `The flight ${flight.id} with origin ${flight.from} and destination ${
            flight.to
          } has a cost of ${flight.cost}€ and ${
            flight.layover
              ? "makes a stopover."
              : "does not make any stopovers."
          }`
      )
      .join("\n");

    return flightModification;
  };

  const adminAddFlights = () => {
    let letters = /^[A-Za-z]+$/;
    if (flights.length > 15) {
      alert("Cannot add more flights. Maximum limit reached.");

      whatActionToDo();
      return;
    }

    let enterDestination = prompt(
      "Please enter the destination of the flight:"
    );

    if (enterDestination === null) {
      goodbyeMessage(enterDestination);
      return;
    } else if (!letters.test(enterDestination)) {
      invalidInput();
      enterDestination = prompt("Please enter the destination of the flight:");
    }
    let enterOrigin = prompt("Please enter the origin of the flight:");
    if (enterOrigin === null) {
      goodbyeMessage(enterOrigin);
      return;
    } else if (!letters.test(enterOrigin)) {
      invalidInput();
      enterOrigin = prompt("Please enter the origin of the flight:");
    }

    let enterCost = +prompt("Please enter the cost of the flight:");
    if (enterCost === null) {
      goodbyeMessage(enterCost);
      return;
    } else if (Number.isNaN(Number(enterCost))) {
      invalidInput();
      enterCost = +prompt("Please enter the cost of the flight:");
    }

    let enterLayover = prompt(`Is this a layover flight? 'TRUE' / 'FALSE'`);
    while (enterLayover !== "TRUE" && enterLayover !== "FALSE") {
      if (enterLayover === null) {
        goodbyeMessage(enterLayover);
        return;
      }
      invalidInput();
      enterLayover = prompt("Is this a layover flight?  'TRUE' / 'FALSE'");
    }
    enterLayover = enterLayover === "TRUE" ? true : false;

    let currentNumberOfFlights = flights.length;
    for (let i = 0; i < 1; i++) {
      let newFlight = {
        id: currentNumberOfFlights + i,
        to: enterDestination,
        from: enterOrigin,
        cost: enterCost,
        layover: enterLayover ? true : false,
      };

      flights.push(newFlight);
      console.log(`The flight ${newFlight.id} has been added successfully.`);
      console.log(flightUpdate());

      doAnotherOperation();
      return;
    }
  };

  const removeFlights = (id) => {
    let whichFlightDoYouWantToDelete = +prompt(
      `Please enter the id of the flight you want to delete:`
    );
    if (whichFlightDoYouWantToDelete === null) {
      goodbyeMessage(whichFlightDoYouWantToDelete);
      return;
    }
    if (Number.isNaN(parseInt(whichFlightDoYouWantToDelete))) {
      invalidInput();
      removeFlights();
    }
    const flightNumber = flights.findIndex(
      (flight) => flight.id === Number(whichFlightDoYouWantToDelete)
    );
    if (flightNumber === -1) {
      alert(
        `The flight with id ${whichFlightDoYouWantToDelete} could not be found.`
      );
      removeFlights();
      return;
    }
    let confirmationDeleteFlights = prompt(
      `Are you sure you want to delete the flight with id ${whichFlightDoYouWantToDelete}? Y/N.`
    );
    if (confirmationDeleteFlights === null) {
      return goodbyeMessage(confirmationDeleteFlights);
    }
    confirmationDeleteFlights = confirmationDeleteFlights.toUpperCase();

    if (
      confirmationDeleteFlights !== "Y" &&
      confirmationDeleteFlights !== "N"
    ) {
      invalidInput();
    }
    if (confirmationDeleteFlights === "Y") {
      flights.splice(flightNumber, 1);
      console.log(
        `The flight with id ${whichFlightDoYouWantToDelete} has been deleted.`
      );
      console.log(flightUpdate());
      doAnotherOperation();
    } else if (confirmationDeleteFlights === "N") {
      doAnotherOperation();
    }
    return;
  };
  const userSearchPrice = () => {
    const minimumPrice = flights.reduce((min, flight) => {
      return Math.min(min, flight.cost);
    }, Infinity);
    const maximumPrice = flights.reduce((max, flight) => {
      return Math.max(max, flight.cost);
    }, -Infinity);
    alert(
      `The minimum prices are: ${minimumPrice}€ and the maximum prices are: ${maximumPrice}€`
    );
    let searchFlightPrices = prompt(
      "Please enter the price you want to search:"
    );
    if (searchFlightPrices === null) {
      goodbyeMessage(searchFlightPrices);
      return;
    }
    if (Number.isNaN(Number(searchFlightPrices))) {
      invalidInput();
      userSearchPrice();
      return;
    }
    if (
      searchFlightPrices < minimumPrice ||
      searchFlightPrices > maximumPrice
    ) {
      alert("You have entered a non-existent price, please try again.");
      userSearchPrice();
      return;
    }

    const flightsFound = (flights) => {
      const priceFinder = flights
        .filter((flight) => flight.cost <= searchFlightPrices)
        .sort((a, b) => b.cost - a.cost)
        .map((flight) => {
          return `The flight ${flight.id} with origin ${
            flight.from
          } and destination ${flight.to} has a cost of ${flight.cost}€ ${
            flight.layover
              ? "makes a stopover."
              : "does not make any stopovers."
          }`;
        });
      console.log(priceFinder.join("\n"));

      doAnotherOperation();
    };
    flightsFound(flights);
    return;
  };

  const whatActionToDo = () => {
    let action = prompt(
      `What action do you want to perform? press ADD, DELETE, SHOW. If you want to go back to the beginning press BACK`
    );

    if (action === null) {
      goodbyeMessage(action);
      return;
    }

    action = action.toUpperCase();

    if (action === "ADD") {
      adminAddFlights();
    } else if (action === "SHOW") {
      console.log(flightUpdate());

      return whatActionToDo();
    } else if (action === "DELETE") {
      removeFlights();
      return whatActionToDo();
    } else if (action === "BACK") {
      administratorOrUser();
    } else {
      invalidInput();
      whatActionToDo();
    }

    return action;
  };

  const administratorOrUser = () => {
    const questionAdminOrUser = prompt(
      `Can you tell me if you are a user or an administrator please? ADMIN/USER`
    );
    if (questionAdminOrUser === null) {
      goodbyeMessage(questionAdminOrUser);
      return;
    }

    const replyFromAdminOrUser = questionAdminOrUser.toUpperCase();

    if (replyFromAdminOrUser === "ADMIN") {
      alert("Welcome Admin!");
      whatActionToDo();
    } else if (replyFromAdminOrUser === "USER") {
      alert("Welcome User!");
      userSearchPrice();
    } else {
      invalidInput();
      administratorOrUser();
    }

    goodbyeMessage(replyFromAdminOrUser);
  };
  administratorOrUser();
};
airlinesPro();
